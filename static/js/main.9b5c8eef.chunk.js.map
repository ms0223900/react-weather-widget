{"version":3,"sources":["weather-widget/lib/WeatherStatusIconHandlers.js","weather-widget/components/WeatherStatusIcon.jsx","weather-widget/components/TemperatureItem.jsx","weather-widget/components/MinMaxTemperatureList.jsx","weather-widget/components/PopItem.jsx","weather-widget/components/CountySelector.jsx","weather-widget/components/WeatherWidget.jsx","weather-widget/API/api.js","weather-widget/lib/useSelect.js","weather-widget/containers/functions/WeatherPartHandlers.js","weather-widget/containers/functions/useWeatherWidget.js","weather-widget/lib/useFetch.js","weather-widget/config.js","weather-widget/containers/WeatherWidgetContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["WeatherStatusIconHandlers","getIconNumFromWxValue","wxValue","numWxValue","Number","useStyles","makeStyles","theme","root","width","margin","display","WeatcherStatusIcon","wxName","iconNum","iconImage","images","classes","Box","className","src","alt","name","title","fontWeight","color","TemperatureItem","temperature","Typography","variant","connector","paddingLeft","spacing","paddingRight","MinMaxTemperatureList","minTemperature","maxTemperature","alignItems","justifyContent","popIcon","pop","PopItem","icons_weather_pop","CountySelector","options","value","onSelect","Select","onChange","fullWidth","map","option","i","MenuItem","key","text","maxWidth","borderRadius","padding","boxShadow","WeatherWidget","props","Divider","useSelect","initValue","useState","setValue","handleChange","useCallback","e","target","WeatherWidgetHandlers","getSingleWeatherDataFromElementTimes","weatherElementTimes","parameter","parameterName","getSingleWeatherDataParameterValueFromElementTimes","parameterValue","getCountyWeatherData","rawData","undefined","county","res","countyWeather","records","location","find","l","locationName","weatherElement","elementName","minT","maxT","wx","this","time","getCountyOptions","useWeatherWidget","fetchState","apiUrl","initResponseData","requestInit","loading","setLoading","error","setErr","responseData","setResponseData","handleFetch","fetch","then","json","catch","console","finally","useFetch","process","useEffect","weatherWidgetData","useMemo","countyOptions","WeatherWidgetContainer","CircularProgress","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9b5c8eef.chunk.js","sourcesContent":["const WeatherStatusIconHandlers = {\r\n  // iconNum: icon代碼\r\n  getIconNumFromWxValue(wxValue) {\r\n    const numWxValue = Number(wxValue);\r\n    if(numWxValue === 1) \r\n      return 1;\r\n\r\n    else if((numWxValue >= 2 && numWxValue <= 3) || (numWxValue >= 24 && numWxValue <= 28)) \r\n      return 2;\r\n\r\n    else if(numWxValue === 8) \r\n      return 4;\r\n\r\n    else if(numWxValue >= 4 && numWxValue <= 10)  \r\n      return 3;\r\n\r\n    else if(numWxValue === 11 || numWxValue === 12 || numWxValue === 15 || (numWxValue >= 18 && numWxValue <= 23) || numWxValue === 30 || numWxValue === 34 || (numWxValue >= 37 && numWxValue <= 39) || numWxValue === 41) \r\n      return 4;\r\n\r\n    else if(numWxValue === 13 || numWxValue === 14 || (numWxValue >=29 && numWxValue <= 32)) \r\n      return 5;\r\n\r\n    return 6;\r\n  },\r\n};\r\n\r\nexport default WeatherStatusIconHandlers;","import React from 'react'\nimport { Box, makeStyles } from '@material-ui/core'\nimport WeatherStatusIconHandlers from '../lib/WeatherStatusIconHandlers'\nimport images from '../static/images.json'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 100,\n    margin: 'auto',\n    '& img': {\n      display: 'block',\n      width: '100%'\n    },\n  }\n}));\n\nconst WeatcherStatusIcon = ({\n  wxName, wxValue\n}) => {\n  const iconNum = WeatherStatusIconHandlers.getIconNumFromWxValue(wxValue)\n  const iconImage = images[`weatherStatus_icon_status_${iconNum}`]\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n      <img \n        src={iconImage.src}\n        alt={iconImage.name}\n        title={wxName}\n      />\n    </Box>\n  )\n}\n\nexport default WeatcherStatusIcon","import React from 'react';\r\nimport { Box, Typography, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    fontWeight: 600,\r\n    color: '#555',\r\n  }\r\n}));\r\n\r\nconst TemperatureItem = ({\r\n  temperature\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Typography className={classes.root} variant={'h6'}>\r\n      {temperature}\r\n      <sup>{'°'}</sup>\r\n      {'C'}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default TemperatureItem;","import React from 'react';\r\nimport { Box, Typography, makeStyles } from '@material-ui/core';\r\nimport TemperatureItem from './TemperatureItem';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n     \r\n  },\r\n  connector: {\r\n    paddingLeft: theme.spacing(0.5),\r\n    paddingRight: theme.spacing(0.5),\r\n  }\r\n}));\r\n\r\nconst MinMaxTemperatureList = ({\r\n  minTemperature, maxTemperature,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box\r\n      display={'flex'}\r\n      alignItems={'center'}\r\n      justifyContent={'center'}\r\n    >\r\n      <TemperatureItem temperature={minTemperature} />\r\n      <Typography className={classes.connector}>{'-'}</Typography>\r\n      <TemperatureItem temperature={maxTemperature} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MinMaxTemperatureList;","import React from 'react';\r\nimport { Box, Typography, makeStyles } from '@material-ui/core';\r\nimport images from '../static/images.json'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: 'auto',\r\n  },\r\n  popIcon: {\r\n    width: 20,\r\n  },\r\n  pop: {\r\n    fontWeight: 100,\r\n    color: '#555',\r\n    paddingLeft: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n// 降水機率\r\nconst PopItem = ({\r\n  pop,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Box\r\n        className={classes.root}\r\n        display={'flex'}\r\n        alignItems={'center'}\r\n        justifyContent={'center'}\r\n      >\r\n        <img \r\n          className={classes.popIcon}\r\n          src={images.icons_weather_pop.src}\r\n          title={'降雨機率'}\r\n          alt={images.icons_weather_pop.name}\r\n        />\r\n        <Typography \r\n          className={classes.pop}\r\n          variant={'body'}\r\n        >\r\n          {`${pop} %`}\r\n        </Typography>\r\n      </Box>\r\n  );\r\n};\r\n\r\nexport default PopItem;","import React from 'react'\nimport { Box, Select, MenuItem } from '@material-ui/core'\n\nconst CountySelector = ({\n  options=[], value='', onSelect, \n}) => {\n  return (\n    <Select\n      value={value}\n      onChange={onSelect}\n      fullWidth={true}\n    >\n      {options.map((option, i) => (\n          <MenuItem \n            key={ i } \n            value={ option.value }\n          >\n            { option.text }\n          </MenuItem>\n        ))}\n    </Select>\n  )\n}\n\nexport default CountySelector","import React from 'react'\nimport { Box, makeStyles, Divider } from '@material-ui/core'\nimport WeatcherStatusIcon from './WeatherStatusIcon'\nimport MinMaxTemperatureList from './MinMaxTemperatureList'\nimport PopItem from './PopItem'\nimport CountySelectorSelector from './CountySelector'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 160,\n    margin: 'auto',\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(1),\n    boxShadow: '0px 0px 10px #ccc',\n  }\n}));\n\nconst WeatherWidget = (props) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.root}>\n      <WeatcherStatusIcon {...props} />\n      <MinMaxTemperatureList {...props} />\n      <PopItem {...props} />\n      <Divider />\n      <CountySelectorSelector {...props} />\n    </Box>\n  )\n}\n\nexport default WeatherWidget","export const cwbApiUrl = process.env.REACT_APP_CWB_OPENDATA_36HR_WEATHER","import { useState, useCallback } from \"react\"\n\nconst useSelect = (initValue='') => {\n  const [value, setValue] = useState(initValue)\n  \n  const handleChange = useCallback((e) => {\n    const { value } = e.target;\n    setValue(value);\n  }, [])\n\n  return ({\n    value,\n    setValue,\n    handleChange,\n  })\n}\n\nexport default useSelect","const WeatherWidgetHandlers = {\r\n  getSingleWeatherDataFromElementTimes(weatherElementTimes) {\r\n    const element = weatherElementTimes[0];\r\n    const res = element.parameter.parameterName;\r\n    return res;\r\n  },\r\n\r\n  getSingleWeatherDataParameterValueFromElementTimes(weatherElementTimes) {\r\n    const element = weatherElementTimes[0];\r\n    const res = element.parameter.parameterValue;\r\n    return res;\r\n  },\r\n\r\n  getCountyWeatherData(rawData=undefined, county='臺北市') {\r\n    let res = {\r\n      pop: '0',\r\n      minTemperature: 24,\r\n      maxTemperature: 24,\r\n      wxValue: '0',\r\n      wxName: '',\r\n    };\r\n    if(!rawData) {\r\n      return res\r\n    } else {\r\n      const countyWeather = rawData.records.location.find(l => l.locationName === county);\r\n      if(countyWeather) {\r\n        const pop = countyWeather.weatherElement.find(e => e.elementName === 'PoP');\r\n        const minT = countyWeather.weatherElement.find(e => e.elementName === 'MinT');\r\n        const maxT = countyWeather.weatherElement.find(e => e.elementName === 'MaxT');\r\n        const wx = countyWeather.weatherElement.find(e => e.elementName === 'Wx');\r\n  \r\n        if(pop && minT && maxT && wx) {\r\n          res = {\r\n            pop: this.getSingleWeatherDataFromElementTimes(pop.time),\r\n            minTemperature: this.getSingleWeatherDataFromElementTimes(minT.time),\r\n            maxTemperature: this.getSingleWeatherDataFromElementTimes(maxT.time),\r\n            wxValue: this.getSingleWeatherDataParameterValueFromElementTimes(wx.time),\r\n            wxName: this.getSingleWeatherDataFromElementTimes(wx.time),\r\n          };\r\n        }\r\n      }\r\n      return res;\r\n    }\r\n  },\r\n\r\n  getCountyOptions(rawData=undefined) {\r\n    if(!rawData) {\r\n      return []\r\n    } else {\r\n      const options = rawData.records.location\r\n        .map(l => ({\r\n          text: l.locationName,\r\n          value: l.locationName,\r\n        }))\r\n      return options\r\n    }\r\n  }\r\n}\r\n\r\nexport default WeatherWidgetHandlers;","import useFetch from \"../../lib/useFetch\"\nimport { cwbApiUrl } from \"../../API/api\"\nimport { useEffect, useMemo } from \"react\"\nimport useSelect from \"../../lib/useSelect\"\nimport { DEFAULT_COUNTY } from \"../../config\"\nimport WeatherWidgetHandlers from \"./WeatherPartHandlers\"\n\nconst useWeatherWidget = () => {\n  const fetchState = useFetch({\n    apiUrl: cwbApiUrl,\n    initResponseData: undefined,\n  })\n  const {\n    handleFetch,\n    responseData,\n  } = fetchState\n\n  const {\n    value,\n    handleChange  \n  } = useSelect(DEFAULT_COUNTY)\n\n  // 組件一mount好就fetch資料\n  useEffect(() => {\n    handleFetch()\n  }, [handleFetch])\n\n  // 儲存計算好的data\n  const weatherWidgetData = useMemo(() => (\n    WeatherWidgetHandlers.getCountyWeatherData(responseData, value)\n  ), [responseData, value])\n\n  const countyOptions = useMemo(() => (\n    WeatherWidgetHandlers.getCountyOptions(responseData)\n  ), [responseData])\n\n  return ({\n    ...fetchState,\n    value,\n    handleChange,\n    weatherWidgetData,\n    countyOptions,\n  })\n}\n\nexport default useWeatherWidget","import { useState, useCallback } from \"react\";\r\n\r\nexport default function useFetch({\r\n  apiUrl, initResponseData, requestInit,\r\n}) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setErr] = useState();\r\n  const [responseData, setResponseData] = useState(initResponseData);\r\n\r\n  const handleFetch = useCallback(() => {\r\n    setLoading(true);\r\n\r\n    fetch(apiUrl, requestInit)\r\n      .then(res => res.json())\r\n      .then(res => setResponseData(res))\r\n      .catch(error => {\r\n        console.error(error);\r\n        setErr(error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [apiUrl, requestInit]);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    handleFetch,\r\n    responseData\r\n  };\r\n}","export const DEFAULT_COUNTY = '臺北市'","import React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\nimport WeatherWidget from '../components/WeatherWidget'\nimport useWeatherWidget from './functions/useWeatherWidget'\n\nconst WeatherWidgetContainer = () => {\n  const {\n    loading,\n    value,\n    handleChange,\n    countyOptions,\n    weatherWidgetData,\n  } = useWeatherWidget()\n\n  if(loading)\n    return (\n      <CircularProgress />\n    )\n\n  return (\n    <WeatherWidget\n      {...weatherWidgetData}\n      value={value}\n      options={countyOptions}\n      onSelect={handleChange}\n    />\n  )\n}\n\nexport default WeatherWidgetContainer","import React from 'react';\nimport WeatherWidgetContainer from './weather-widget/containers/WeatherWidgetContainer';\n\nfunction App() {\n  return (\n    <div>\n      <WeatherWidgetContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}